# -*- coding: utf-8 -*
#max 的使用方法
#max([3,4,5,0]) 返回 5
#max([3,4,-5,0], key=abs) 返回-5 give me the maximum accorkding to key=abs(the absolute values of those numbers)
#keyword argument
#当想运行几个案例去test function时，可以用def test()
#tuples （7,9,5）这是三个数group到一起的set；而且（7,9,3）>(7,3,2)compare from left to right
#在比较所有hands时，不单单是full house和staight flust的比较，full house之间也要比较。所以引入tuples，用第一个数字展示出rank，第二个展示都是rank 7时那个更大

#the Poker Function

def poker(hands):
    #return the best hand: poker([hand, ...]) => [hand,...]
    return allmax(hands, key = hand_rank) #key = function, returns the max according to the function hand_rank 翻译过来是，使得hand_rank最大的hands）
def allmax(iterable, key=None):
	#Return a list of all items equal to the max of the iterable.
	result, maxval = [], None  #initial values for result and max value.
	key = key or (lambda x: x) #use the function provided or use the function that maps an argument to itself.
    for x in iterable:
        xval = key(x)
        if not result or xval > maxval: #if xval is greater than maxval or if I don't have a result yet at all(注：not result在一起看，not result 就是 result还没有值)
            result, maxval = [x], xval
        elif xval == maxval:
            result.append(x)
    return result
'''
The whole idea of having tests like this is a vital part of software development.
It's important that each part of the specification gets turned into a piece of code
that implements it and a test that tests it.
'''
def card_ranks(hand):
    #return a list of the ranks, sorted with higher first
    # we are iterating over the cards and we have 2 values: the rank and the suit
    ranks = ['--23456789TJQKA'.index(r) for r, s in hand] #each card is a two value element,break down to r and s. But we only collect up ranks and make it into a list
    ranks.sort(reverse = True) #sort with higher come first
    return [5, 4, 3, 2, 1] if (ranks == [14, 5, 4, 3, 2]) else ranks
def straight(ranks):
    #Return True if the ordered ranks form a 5-card straight.
	'''    
    	if ranks.sort(reverse = True) == ranks:  #我这样写报错，why
    		return True
    	else:
    		return False
	'''    
    return (max(ranks)-min(ranks) == 4) and len(set(ranks)) == 5 #最大和最小差距为4 而且 all the cards are different
    
def flush(hand):
	#return true if all the cards have the same suit
	suits = [s for r, s in hand] #将s列出来成为一个list
	return len(set(suits)) == 1 #list中只有一个元素，也就是所有card的suit相同。

def kind(n, ranks):
    """Return the first rank that this hand has exactly n of.
    Return None if there is no n-of-a-kind in the hand."""
    for r in ranks:
    	if ranks.count(r) == n: return r #.count()数ranks中的r出现过多少次
    return None

def two_pair(ranks):
	"""if there are two pair, return the two ranks as a tuple:(highest, lowest);otherwise return None."""
	pair = kind(2, ranks) #这个一定是high pair 因为rank是从大到小的
	lowpair = kind(2, list(reversed(ranks))) #从ranks的反向找pair，应该是小的pair
	if pair and lowpair != pair:
		return (pair, lowpair)
	else:
		return None

def hand_rank(hand):
    #Return a value indicating the ranking of a hand
    ranks = card_ranks(hand) #return the cards in sorted order
    if straight(ranks) and flush(hand): #straight flush同花顺
        return (8, max(ranks)) #2 3 4 5 6 (8, 6), 6 7 8 9 10 (8, 10)
    elif kind(4, ranks): #这里让kind这个函数如果是真时返回的是数值（也就是下一句用到的），如果不对就是错误。boolean 和数字的同时运用
        return (7, kind(4, ranks), kind(1, ranks)) #9 9 9 9 3 (7,9,3)
    elif kind(3, ranks) and kind(2, ranks): #full house
        return (6, kind(3, ranks), kind(2, ranks))
    elif flush(hand):#同花
        return (5, ranks)
    elif straight(ranks):#顺子
        return (4, max(ranks))
    elif kind(3, ranks): #三张
        return (3, kind(3, ranks), ranks)
    elif two_pair(ranks):#两对
        return (2, two_pair(ranks), ranks)
    elif kind(2, ranks):#一对
        return (1, kind(2, ranks), ranks)
    else:#啥也没有
        return (0, ranks)

def test():
    #test cases for the functions in poker program.
    #one important principle of testing is to do extreme values
    sf = "6C 7C 8C 9C TC".split() #straight flush output:['6C', '7C', '8C', '9C', 'TC']
    fk = "9D 9H 9S 9C 7D".split() #four of a kind
    fh = "TD TC TH 7C 7D".split() #full house
    tp = "5S 5D 9H 9C 6S".split() #two pairs
    s1 = "AS 2S 3S 4S 5C".split() #A-5straight
    s2 = "2C 3C 4C 5S 6S".split() #2-6straight
    ah = "AS 2S 3S 4S 6C".split() #A high
    sh = "2S 3S 4S 6C 7D".split() #7 high
    '''#I am asserting the following thing must be true. 
    If it is not true, then the program will stop and print an error msg. 
    If it is true, it will move on to return test pass
    '''
    assert poker([s1, s2, ah, sh]) == [s2]
    fkranks = card_ranks(fk)
    tpranks = card_ranks(tp)
    assert kind(4, fkranks) == 9
    assert kind(3, fkranks) == None
    assert kind(2, fkranks) == None
    assert kind(1, fkranks) == 7
    assert two_pair(fkranks) == None
    assert two_pair(tpranks) == (9, 5)
    assert straight([9,8,7,6,5]) == True #straight takes as input a list of ranks, not a hand of card
    assert straight([9,8,8,6,5]) == False
    assert flush(sf) == True
    assert flush(fk) == False
    assert card_ranks(sf) == [10, 9, 8, 7, 6]
    assert card_ranks(fk) == [9, 9, 9, 9, 7]
    assert card_ranks(fh) == [10, 10, 10, 7, 7]
    assert poker([sf,fk,fh]) == [sf] 
    assert poker([fk,fh]) == [fk,fk]
    assert poker([fh,fh]) == [fh]  #extreme value'''
    assert poker([sf]) == sf #检查一手hand'''
    assert poker([sf] + 99*[fh]) == [sf] #检查100手也可以运行 '''
    assert hand_rank(sf) == (8, 10)  #对每一个函数都要进行test，sf不用加[]，我还不太明白why
    assert hand_rank(fk) == (7, 9, 7)
    assert hand_rank(fh) == (6,10,7)
    #因为有9中不同的hand，要至少有9个test，分别检查，真实情况下可能更多以确保程序的正确性
    return "tests pass"

print test()


